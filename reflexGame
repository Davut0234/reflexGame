#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128  // OLED ekran genişliği (piksel)
#define SCREEN_HEIGHT 64  // OLED ekran yüksekliği (piksel)
#define OLED_RESET -1     // OLED reset pini (kullanılmıyor, Arduino'nun reset pinine bağlı)
#define RESET_BUTTON 11   // Sıfırlama butonu pini
#define player1Led A0     // 1. oyuncu LED pini
#define player2Led A1     // 2. oyuncu LED pini

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Pin numaraları dizisi (7-segment gösterge kontrolü için)
const int NUM_PINS = 7;
int pins[NUM_PINS] = { 2, 3, 4, 5, 6, 7, 8 };
const int buttonPin1 = 9;   // 1. oyuncunun buton pini
const int buttonPin2 = 10;  // 2. oyuncunun buton pini

// Geri sayım değişkenleri
int num = 4;                          // Geri sayım başlangıç sayısı
unsigned long previousMillis = 0;     // Son geri sayım zamanı
unsigned long countdownInterval = 1000; // Geri sayım aralığı (ms)
bool changeScreen = false;            // OLED ekranın yenilenmesi için flag
// Oyuncu değişkenleri
bool buttonPressed1 = false;          // 1. oyuncunun buton basma durumu
bool buttonPressed2 = false;          // 2. oyuncunun buton basma durumu
int currentPlayer = 1;                // Şu anki aktif oyuncu
int oldPlayer = 0;                    // Bir önceki oyuncu
int player1Score = 0;                 // 1. oyuncunun puanı
int player2Score = 0;                 // 2. oyuncunun puanı
int roundNumber = 1;                  // Tur numarası
bool roundCompleted = false;          // Tur tamamlanma durumu
bool gameFinished = false;            // Oyun bitiş durumu
bool isPointGiven = false;            // Puan verilip verilmediği
bool isButtonLocked = false;          // Buton kilit durumu
// Her sayıya karşılık gelen pin durumları (0-4 için)
int pinStates[][NUM_PINS] = {
  { 0, 0, 0, 0, 0, 0, 1 },  // 0
  { 1, 0, 0, 1, 1, 1, 1 },  // 1
  { 0, 0, 1, 0, 0, 1, 0 },  // 2
  { 0, 0, 0, 0, 1, 1, 0 },  // 3
  { 1, 0, 0, 1, 1, 0, 0 }   // 4
};

// Buton debounce süresi (ms)
const int debounceTime = 40;

// Butonlar için son debounce zamanları
unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;

// Tura göre puan hesaplama fonksiyonu
int getPointsForRound() {
  if (roundNumber <= 1) {  // İlk tur
    return 1;
  } else if (roundNumber <= 5) {  // 2-5. turlar
    return roundNumber;
  } else {  // Ekstra turlar
    return (roundNumber)*2 / 3 + 4;
  }
}

// Geri sayım fonksiyonu
void countdown() {
  if (millis() - previousMillis >= countdownInterval) {
    previousMillis = millis();
    isPointGiven = false;

    // Bir sonraki sayıyı göstermek için pinleri güncelle
    for (int i = 0; i < NUM_PINS; i++) {
      digitalWrite(pins[i], pinStates[num][i]);
    }
    num--;

    if (num < 0) {  // Geri sayım bittiğinde
      num = 4;
      roundCompleted = true;
      isButtonLocked = false;
      buttonPressed1 = false;
      buttonPressed2 = false;
    }
  }

  // Puanlama kontrolü
  if (!isPointGiven) {
    if (!isButtonLocked) {
      if ((num == 0) && ((currentPlayer == 1 && buttonPressed1) || (currentPlayer == 2 && buttonPressed2))) {
        int points = getPointsForRound();
        isPointGiven = true;
        if (currentPlayer == 1) {
          player1Score += points;  // 1. oyuncuya puan ekle
          return;
        } else {
          player2Score += points;  // 2. oyuncuya puan ekle
          return;
        }
      } else {
        if (buttonPressed1 || buttonPressed2) {
          isButtonLocked = true;
        }
        buttonPressed1 = false;
        buttonPressed2 = false;
      }
    }
  }
}

// 1. oyuncunun buton basma durumunu kontrol et
void checkButton1() {
  unsigned long currentMillis = millis();
  int buttonState = digitalRead(buttonPin1);
  if (buttonState == HIGH && (currentMillis - lastDebounceTime1 > debounceTime)) {
    buttonPressed1 = true;
    lastDebounceTime1 = currentMillis;
  }
}

// 2. oyuncunun buton basma durumunu kontrol et
void checkButton2() {
  unsigned long currentMillis = millis();
  int buttonState = digitalRead(buttonPin2);
  if (buttonState == HIGH && (currentMillis - lastDebounceTime2 > debounceTime)) {
    buttonPressed2 = true;
    lastDebounceTime2 = currentMillis;
  }
}

// OLED ekranı güncelle
void updateScreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Round: ");
  display.println(roundNumber);
  display.print("Player 1 Score: ");
  display.println(player1Score);
  display.print("Player 2 Score: ");
  display.println(player2Score);
  display.setTextSize(2);
  display.print("Current \nPlayer: ");
  display.println(currentPlayer);
  display.display();
  display.setTextSize(1);
}

void setup() {
  Serial.begin(9600);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // OLED ekran başlangıç kontrolü
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1.3);
  display.setCursor(0, 0);
  display.println("Game Starting...");
  display.display();
  delay(2000);
  display.clearDisplay();

  // Pinleri ayarla
  for (int i = 0; i < NUM_PINS; i++) {
    pinMode(pins[i], OUTPUT);
  }
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(RESET_BUTTON, INPUT);
  pinMode(player1Led, OUTPUT);
  pinMode(player2Led, OUTPUT);
  digitalWrite(player1Led, 0);
  digitalWrite(player2Led, 0);
  updateScreen();
}

void loop() {
  if (!gameFinished) {  // Oyun devam ederken
    countdown();

    if (!roundCompleted) {
      if (currentPlayer == 1) {
        checkButton1();  // 1. oyuncunun buton durumu kontrol edilir
        digitalWrite(player1Led, 1);
        digitalWrite(player2Led, 0);
      } else {
        checkButton2();  // 2. oyuncunun buton durumu kontrol edilir
        digitalWrite(player1Led, 0);
        digitalWrite(player2Led, 1);
      }
    }

    if (roundCompleted) {  // Tur tamamlandığında
      delay(2000);
      num = 4;
      roundCompleted = false;

      // Tur sayısını arttır ve hızlandır
      if (currentPlayer == 2) {
        countdownInterval = int(countdownInterval * (1 - (0.09 * roundNumber)));
        roundNumber++;
      }

      currentPlayer = (currentPlayer == 1) ? 2 : 1;
      if (oldPlayer != currentPlayer) {
        updateScreen();
      }
      oldPlayer = currentPlayer;

      // Oyun bitiş kontrolü
      if (roundNumber >= 6) {
        if (player1Score > player2Score) {
          display.clearDisplay();
          display.setCursor(0, 0);
          display.println("Player 1 Wins!");
          display.display();
          delay(5000);
          gameFinished = true;
        } else if (player1Score < player2Score) {
          display.clearDisplay();
          display.setCursor(0, 0);
          display.println("Player 2 Wins!");
          display.display();
          delay(5000);
          gameFinished = true;
        }
      }
    }
  } else {
    // Oyun bittiğinde sıfırlama butonunu bekle
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Game Over");
    display.println("Press Reset Button");
    display.display();
  }
}

/*
Çalışma Prensibi:
Bu program bir Arduino tabanlı iki oyunculu refleks oyunu oluşturur. Oyuncular, kendi butonlarına doğru zamanda basarak puan kazanmaya çalışırlar. Her turda 5'ten 0'a doğru geri sayım yapılır ve oyuncular 0'a ulaşmadan butonlarına basmalıdır. Puanlama, turların zorluk seviyesine göre değişir. Oyun, OLED ekranında durum bilgilerini gösterir ve LED'lerle oyuncuların aktif olduğunu belirtir.

Oyun Başlangıcı: Oyuncular, sıfırlama butonuna basarak oyuna başlar.
Turlar: Her turda bir oyuncu aktif olur. 1 sayısına ulaşıldığında doğru zamanda butona basılırsa puan kazanılır.
Puanlama: İlk turda 1 puan, sonraki turlarda artan miktarda puan verilir.
Oyun Bitişi: 6. turdan sonra en çok puanı alan oyuncu kazanır. Beraberlik durumunda ekstra turlar başlatılabilir.


Alternatif kod:

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128  // OLED ekran genişliği (piksel)
#define SCREEN_HEIGHT 64  // OLED ekran yüksekliği (piksel)
#define OLED_RESET -1     // OLED reset pini (kullanılmıyor, Arduino'nun reset pinine bağlı)
#define RESET_BUTTON 11   // Sıfırlama butonu pini
#define player1Led A0     // 1. oyuncu LED pini
#define player2Led A1     // 2. oyuncu LED pini

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int NUM_PINS = 7;
int pins[NUM_PINS] = { 2, 3, 4, 5, 6, 7, 8 };
const int buttonPin1 = 9;
const int buttonPin2 = 10;

int num = 4;
unsigned long previousMillis = 0;
unsigned long countdownInterval = 1000;
bool changeScreen = false;
bool buttonPressed1 = false;
bool buttonPressed2 = false;
int currentPlayer = 1;
int oldPlayer = 0;
int player1Score = 0;
int player2Score = 0;
int roundNumber = 1;
bool roundCompleted = false;
bool gameFinished = false;
bool isPointGiven = false;
bool isButtonLocked = false;

int pinStates[][NUM_PINS] = {
  { 0, 0, 0, 0, 0, 0, 1 },
  { 1, 0, 0, 1, 1, 1, 1 },
  { 0, 0, 1, 0, 0, 1, 0 },
  { 0, 0, 0, 0, 1, 1, 0 },
  { 1, 0, 0, 1, 1, 0, 0 }
};

const int debounceTime = 40;
unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;

int getPointsForRound() {
  if (roundNumber <= 1) {
    return 1;
  } else if (roundNumber <= 5) {
    return roundNumber;
  } else {
    return (roundNumber) * 2 / 3 + 4;
  }
}

void countdown() {
  if (millis() - previousMillis >= countdownInterval) {
    previousMillis = millis();
    num--;
    if (num < 0) {
      num = 4;
      roundCompleted = true;
      resetButtonStates();
    }
    update7SegmentDisplay();
  }
}

void update7SegmentDisplay() {
  for (int i = 0; i < NUM_PINS; i++) {
    digitalWrite(pins[i], pinStates[num][i]);
  }
}

void resetButtonStates() {
  isPointGiven = false;
  isButtonLocked = false;
  buttonPressed1 = false;
  buttonPressed2 = false;
}

void handleScoring() {
  if (!isPointGiven && !isButtonLocked) {
    if ((num == 0) && ((currentPlayer == 1 && buttonPressed1) || (currentPlayer == 2 && buttonPressed2))) {
      int points = getPointsForRound();
      isPointGiven = true;
      if (currentPlayer == 1) {
        player1Score += points;
      } else {
        player2Score += points;
      }
    } else if (buttonPressed1 || buttonPressed2) {
      isButtonLocked = true;
    }
  }
  buttonPressed1 = false;
  buttonPressed2 = false;
}

void checkButton1() {
  unsigned long currentMillis = millis();
  int buttonState = digitalRead(buttonPin1);
  if (buttonState == HIGH && (currentMillis - lastDebounceTime1 > debounceTime)) {
    buttonPressed1 = true;
    lastDebounceTime1 = currentMillis;
  }
}

void checkButton2() {
  unsigned long currentMillis = millis();
  int buttonState = digitalRead(buttonPin2);
  if (buttonState == HIGH && (currentMillis - lastDebounceTime2 > debounceTime)) {
    buttonPressed2 = true;
    lastDebounceTime2 = currentMillis;
  }
}

void updateScreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Round: ");
  display.println(roundNumber);
  display.print("Player 1 Score: ");
  display.println(player1Score);
  display.print("Player 2 Score: ");
  display.println(player2Score);
  display.setTextSize(2);
  display.print("Current \nPlayer: ");
  display.println(currentPlayer);
  display.display();
  display.setTextSize(1);
}

void setup() {
  Serial.begin(9600);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1.3);
  display.setCursor(0, 0);
  display.println("Game Starting...");
  display.display();
  delay(2000);
  display.clearDisplay();

  for (int i = 0; i < NUM_PINS; i++) {
    pinMode(pins[i], OUTPUT);
  }
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(RESET_BUTTON, INPUT);
  pinMode(player1Led, OUTPUT);
  pinMode(player2Led, OUTPUT);
  digitalWrite(player1Led, 0);
  digitalWrite(player2Led, 0);
  updateScreen();
}

void loop() {
  if (!gameFinished) {
    countdown();
    handleScoring();

    if (!roundCompleted) {
      if (currentPlayer == 1) {
        checkButton1();
        digitalWrite(player1Led, 1);
        digitalWrite(player2Led, 0);
      } else {
        checkButton2();
        digitalWrite(player1Led, 0);
        digitalWrite(player2Led, 1);
      }
    }

    if (roundCompleted) {
      delay(2000);
      num = 4;
      roundCompleted = false;
      if (currentPlayer == 2) {
        countdownInterval = int(countdownInterval * (1 - (0.09 * roundNumber)));
        roundNumber++;
      }
      currentPlayer = (currentPlayer == 1) ? 2 : 1;
      if (oldPlayer != currentPlayer) {
        updateScreen();
      }
      oldPlayer = currentPlayer;
      checkGameEnd();
    }
  } else {
    displayEndMessage();
  }
}

void checkGameEnd() {
  if (roundNumber >= 6) {
    if (player1Score > player2Score) {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("Player 1 Wins!");
      display.display();
      delay(5000);
      gameFinished = true;
    } else if (player1Score < player2Score) {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("Player 2 Wins!");
      display.display();
      delay(5000);
      gameFinished = true;
    }
  }
}

void displayEndMessage() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Game Over");
  display.println("Press Reset Button");
  display.display();
}

*/
